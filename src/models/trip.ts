import { z } from "zod";

// Generated from https://ember-core.stoplight.io/docs/api-documentation/43512cefd7b4a-get-trip-info
// using https://transform.tools/json-to-zod

export const Trip = z.object({
  availability: z.object({
    "{origin_locationtime_id}": z.object({
      "{destination_locationtime_id}": z.object({
        bicycle: z.number(),
        seat: z.number(),
        wheelchair: z.number(),
      }),
    }),
  }),
  description: z.object({
    calendar_date: z.string(),
    notes: z.string(),
    notes_details: z.object({
      displayed_on_homepage: z.boolean(),
      is_public: z.boolean(),
      rendered_notes: z.string(),
      updated_at: z.string(),
    }),
    pattern_id: z.number(),
    route_number: z.string(),
    type: z.string(),
  }),
  passes: z.array(
    z.object({
      cancellable: z.boolean(),
      code: z.string(),
      customer_uid: z.string(),
      email: z.string(),
      id: z.number(),
      legs: z.array(
        z.object({
          arrival: z.object({
            actual: z.string(),
            estimated: z.string(),
            scheduled: z.string(),
          }),
          boarding_data: z.object({
            checked_in: z.object({
              adult: z.number(),
              bicycle: z.number(),
              child: z.number(),
              concession: z.number(),
              wheelchair: z.number(),
              young_child: z.number(),
            }),
            confirmation_method: z.string(),
            date: z.string(),
            no_show: z.object({
              adult: z.number(),
              bicycle: z.number(),
              child: z.number(),
              concession: z.number(),
              wheelchair: z.number(),
              young_child: z.number(),
            }),
          }),
          departure: z.object({
            actual: z.string(),
            estimated: z.string(),
            scheduled: z.string(),
          }),
          description: z.object({
            amenities: z.object({
              has_toilet: z.boolean(),
              has_wifi: z.boolean(),
            }),
            colour: z.string(),
            destination_board: z.string(),
            number_plate: z.string(),
            operator: z.string(),
            vehicle_type: z.string(),
          }),
          destination: z.object({
            active: z.boolean(),
            area_id: z.number(),
            atco_code: z.string(),
            code: z.string(),
            code_detail: z.string(),
            description: z.string(),
            detailed_name: z.string(),
            direction: z.string(),
            google_place_id: z.string(),
            id: z.number(),
            lat: z.number(),
            local_name: z.string(),
            location_time_id: z.number(),
            lon: z.number(),
            name: z.string(),
            region_name: z.string(),
            type: z.string(),
          }),
          origin: z.object({
            active: z.boolean(),
            area_id: z.number(),
            atco_code: z.string(),
            code: z.string(),
            code_detail: z.string(),
            description: z.string(),
            detailed_name: z.string(),
            direction: z.string(),
            google_place_id: z.string(),
            id: z.number(),
            lat: z.number(),
            local_name: z.string(),
            location_time_id: z.number(),
            lon: z.number(),
            name: z.string(),
            region_name: z.string(),
            type: z.string(),
          }),
          trip_notes: z.object({
            content: z.string(),
            is_public: z.boolean(),
            rendered_content: z.string(),
            updated_at: z.string(),
          }),
          type: z.string(),
        })
      ),
      mobile_number: z.string(),
      name: z.string(),
      order_date: z.string(),
      order_uid: z.string(),
      price: z.number(),
      status: z.string(),
      tickets: z.object({
        adult: z.number(),
        bicycle: z.number(),
        child: z.number(),
        concession: z.number(),
        wheelchair: z.number(),
        young_child: z.number(),
      }),
    })
  ),
  prices: z.object({
    "{origin_locationtime_id}": z.object({
      "{destination_locationtime_id}": z.object({
        adult: z.number(),
        bicycle: z.number(),
        child: z.number(),
        concession: z.number(),
        wheelchair: z.number(),
        young_child: z.number(),
      }),
    }),
  }),
  route: z.array(
    z.object({
      allow_boarding: z.boolean(),
      allow_drop_off: z.boolean(),
      arrival: z.object({
        actual: z.string(),
        estimated: z.string(),
        scheduled: z.string(),
      }),
      bookable: z.string(),
      booking_cut_off_mins: z.number(),
      departure: z.object({
        actual: z.string(),
        estimated: z.string(),
        scheduled: z.string(),
      }),
      id: z.number(),
      location: z.object({
        atco_code: z.string(),
        bookable_from: z.string(),
        bookable_until: z.string(),
        description: z.string(),
        detailed_name: z.string(),
        direction: z.string(),
        google_place_id: z.string(),
        id: z.number(),
        lat: z.number(),
        lon: z.number(),
        name: z.string(),
        region_name: z.string(),
        timezone: z.string(),
        type: z.string(),
      }),
      pre_booked_only: z.boolean(),
      skipped: z.boolean(),
    })
  ),
  shift: z.object({
    actual_end: z.string(),
    actual_start: z.string(),
    driver: z.object({
      date_of_birth: z.string(),
      email: z.string(),
      id: z.number(),
      mobile_number: z.string(),
      name: z.string(),
      postcode: z.string(),
      preferred_name: z.string(),
      uid: z.string(),
    }),
    id: z.number(),
    scheduled_end: z.string(),
    scheduled_start: z.string(),
    trips: z.array(z.number()),
  }),
  vehicle: z.object({
    bicycle: z.number(),
    brand: z.string(),
    colour: z.string(),
    current_battery_capacity: z.number(),
    gps: z.object({
      acceleration: z.object({ x: z.string(), y: z.string(), z: z.string() }),
      elevation: z.number(),
      heading: z.number(),
      last_updated: z.string(),
      latitude: z.number(),
      longitude: z.number(),
      speed: z.number(),
    }),
    has_toilet: z.boolean(),
    has_wifi: z.boolean(),
    id: z.number(),
    ideal_battery_capacity: z.number(),
    ipad_telematics: z.object({
      battery_percentage: z.object({ as_of: z.string(), value: z.number() }),
      battery_state: z.object({ as_of: z.string(), value: z.number() }),
      is_connected_to_nfc_reader: z.object({
        as_of: z.string(),
        value: z.number(),
      }),
      is_connected_to_qr_code_scanner: z.object({
        as_of: z.string(),
        value: z.number(),
      }),
      is_using_wifi: z.object({ as_of: z.string(), value: z.number() }),
      thermal_state: z.object({ as_of: z.string(), value: z.number() }),
    }),
    is_backup_vehicle: z.boolean(),
    name: z.string(),
    owner_id: z.number(),
    plate_number: z.string(),
    seat: z.number(),
    secondary_gps: z.object({
      heading: z.number(),
      last_updated: z.string(),
      latitude: z.number(),
      longitude: z.number(),
    }),
    target_state_of_charge: z.number(),
    vehicle_telematics: z.object({
      battery_current: z.object({ as_of: z.string(), value: z.number() }),
      battery_percentage: z.object({ as_of: z.string(), value: z.number() }),
      battery_voltage: z.object({ as_of: z.string(), value: z.number() }),
      charger_status: z.object({ as_of: z.string(), value: z.number() }),
      highest_battery_temp: z.object({ as_of: z.string(), value: z.number() }),
      inside_temperature: z.object({ as_of: z.string(), value: z.number() }),
      lowest_battery_temp: z.object({ as_of: z.string(), value: z.number() }),
      odometer_reading: z.object({ as_of: z.string(), value: z.number() }),
      outside_temperature: z.object({ as_of: z.string(), value: z.number() }),
    }),
    wheelchair: z.number(),
  }),
});

export type TripT = z.infer<typeof Trip>;
